{"pageProps":{"post":{"title":"Duplicate Image Detection","description":"In this blog post, we'll build a duplicate image detection system using Jina Hub's ImageHasher Executor","date":"2022-01-22","slug":"2022-01-19_Duplicate_image_detection","author":"Mohammad Kalim, Shubham Saboo","content":"<h2 id=\"background\">Background</h2>\n<p>When working with neural networks, training deep learning models on a self-curated image dataset could be risky and severely affect model performance. If the image dataset is built by scraping Google Images, Bing, etc., or by combining existing datasets, chances are that it could contain duplicate images. The risk posed by this can be summarized as follows:</p>\n<ul>\n<li>It introduces bias into the curated dataset, allowing the deep learning models to learn the patterns specific to duplicate images.</li>\n<li>As the learning becomes more specific, the deep learning model's ability to generalize to new images decreases.</li>\n</ul>\n<p>Removing duplicate images manually is a tedious process. Let's say you have millions of images, then manually inspecting and removing them is  quite time-consuming. We can use comparable hashing techniques to automatically detect and remove duplicate or very similar images from our curated dataset to overcome this.</p>\n<h3 id=\"why-comparable-hashing\">Why comparable hashing?</h3>\n<p>There are many hashing algorithms that you can use to find duplicates, but few of them will be able to find similar images. Therefore, we need a hash function that produces an identical hash for minor changes to the file, or rather one that is as similar as possible. This will help detect the duplicates and very similar images, which could vary in brightness, contrast, grayscale, watermark, etc.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Hashing is a technique to transform any data into a shorter fixed-length value or unique key for that particular data. Cryptographic hash functions like MD5 and SHA-1 generate random hash values and act as a random seed. The same data will generate the same result, but different data will produce different results. Comparing two SHA1 hash values tells you two things: If the hashes are different, then the data is different. And if the hashes are the same, then the data is likely the same.</p>\n<!-- <script src=\"https://gist.github.com/nan-wang/e4a872ec40803eabbbcc6618a4eccb1d.js\"></script> -->\n<blockquote>\n<p><strong>Note</strong>: When applying this hash function to two similar images which differ by just one byte, hash values can be very different.</p>\n</blockquote>\n<p>On the other hand, comparable hashes are different in the sense that they can be compared, making it possible to compare two data points. All comparable hashes have the same basic properties: differently scaled images, varied different aspect ratios, minor coloring differences (like contrast, brightness, etc.), yet they can still be compared and matched.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>We'll look at four different hashing algorithms for duplicate/similar image detection, available in the <a href=\"https://github.com/JohannesBuchner/imagehash\">ImageHash</a> Python library.</p>\n<ol>\n<li>\n<p><strong>Average Hash (aHash)</strong>: Crushes the image into a grayscale 8x8 image and sets the 64 bits in the hash based on whether the pixel's value is greater than the average color for the image. In general, aHash is fast but not very accurate (high false positive).</p>\n</li>\n<li>\n<p><strong>Perceptual Hash (pHash)</strong>: Similar to aHash, but instead of averaging, it relies on <a href=\"https://en.wikipedia.org/wiki/Discrete_cosine_transform\">discrete cosine transformation</a> (DCT) and compares based on frequencies rather than color values. pHash is accurate (less false positives) but not very fast.</p>\n</li>\n<li>\n<p><strong>Difference Hash (dHash)</strong>: Uses the same approach as aHash, but instead of using information about average or mean color values, it uses gradients (the difference between adjacent pixels). The dHash algorithm has all the speed of aHash with very few false positives</p>\n</li>\n<li>\n<p><strong>Wavelet Hash (wHash)</strong>: Very similar to pHash, but instead of DCT it uses discrete <a href=\"https://en.wikipedia.org/wiki/Wavelet_transform\">wavelet transformation</a>. wHash is faster than pHash and more accurate (fewer false positives).</p>\n</li>\n</ol>\n<p>You can find a more detailed evaluation of different comparable hashing algorithms <a href=\"https://content-blockchain.org/research/testing-different-image-hash-functions/\">here</a></p>\n<h2 id=\"duplicatesimilar-image-detection-using-jina\">Duplicate/Similar image detection using Jina</h2>\n<p>You can easily build duplicate image detection using Jina. The <a href=\"link\">ImageHasher Executor</a> implements comparable hashing and is available at Jina Hub. We'll create a Flow for indexing the Documents in the code below. The Document containing images is encoded into hashes using any of the above four techniques and stored with <a href=\"https://hub.jina.ai/executor/zb38xlt4\">SimpleIndexer</a>.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> jina <span class=\"hljs-keyword\">import</span> Document, DocumentArray, Flow\n \n<span class=\"hljs-comment\"># Creating a DocumentArray object</span>\ndocs_index = DocumentArray.from_files(<span class=\"hljs-string\">'index/*'</span>)\ndocs_index = [doc.load_uri_to_image_blob() <span class=\"hljs-keyword\">for</span> doc <span class=\"hljs-keyword\">in</span> docs_index]\n \n<span class=\"hljs-comment\"># Creating the indexing flow with ImageHasher and SimpleIndexer</span>\nflow = (\n   Flow()\n   .add(uses=<span class=\"hljs-string\">'jinahub://ImageHasher'</span>, uses_metas={<span class=\"hljs-string\">'hash_type'</span>: <span class=\"hljs-string\">'dhash'</span>})\n   .add(\n       uses=<span class=\"hljs-string\">'jinahub://SimpleIndexer'</span>,\n       uses_metas={<span class=\"hljs-string\">'workspace'</span>: <span class=\"hljs-string\">'workspace'</span>},\n       uses_with={\n           <span class=\"hljs-string\">'match_args'</span>: {<span class=\"hljs-string\">'limit'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'metric'</span>: <span class=\"hljs-string\">'euclidean'</span>, <span class=\"hljs-string\">'use_scipy'</span>: <span class=\"hljs-literal\">True</span>}\n       },\n   )\n)\n \n<span class=\"hljs-comment\"># Indexing the Documents using the flow</span>\n<span class=\"hljs-keyword\">with</span> flow:\n   flow.post(on=<span class=\"hljs-string\">'/index'</span>, inputs=docs_index)\n\n</code></pre>\n<p>Now we can query with any new Document to find the matching Documents in the indexed data:</p>\n<pre><code class=\"hljs language-python\">\ndocs_query = DocumentArray.from_files(<span class=\"hljs-string\">'query/*'</span>)\ndocs_query = [doc.load_uri_to_image_blob() <span class=\"hljs-keyword\">for</span> doc <span class=\"hljs-keyword\">in</span> docs_query]\n \n<span class=\"hljs-comment\"># Using the same flow as above to find matches</span>\n<span class=\"hljs-comment\"># Opening the flow for incoming queries</span>\n<span class=\"hljs-keyword\">with</span> flow:\n   flow.post(\n       on=<span class=\"hljs-string\">'/search'</span>,\n       inputs= docs_query,\n       on_done=print_matches,\n   )\n\n\n</code></pre>\n<p>You can find the complete source code <a href=\"https://colab.research.google.com/drive/1ct2Gwclp7QdzGWlSwiMHrBG4sw1yn3ap?usp=sharing\">here</a>.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>In this post, we saw how to use different hashing techniques to compare the similarity of images. The above hashing algorithms can precisely compare the slightest change in images using the hash values. With just a few lines of code, we also created a duplicate image detection application using Jina. Using these learnings, you can curate your dataset involving images to train deep learning models for your specific use case.</p>\n<p>Stay tuned for more updates and happy searching!</p>\n<h2 id=\"reference\">Reference:</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/998662/what-is-image-hashing-used-for\">What is image hashing used for?</a></li>\n<li><a href=\"https://towardsdatascience.com/finding-duplicate-images-with-python-71c04ec8051\">Finding duplicate images with Python</a></li>\n<li><a href=\"https://medium.com/@somilshah112/how-to-find-duplicate-or-similar-images-quickly-with-python-2d636af9452f\">How to find duplicate or similar images quickly with Python</a></li>\n<li><a href=\"http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html\">Perpetual hash algorithm</a></li>\n</ul>","coverImage":"/assets/images/blog/2021-01-19_Duplicate_image_detection/cover.png","tags":["image","search"],"sanitize":false,"gfm":true}},"__N_SSG":true}